json
- 프로그래머가 파일에 정보를 저장하기 위해 만든 방식 중 하나
- 파일에 정보를 입력하는 방법이라 생각하면 됨
- nodeJS인 경우 파일 이름이 반드시 package.json 지어야 함

package.json
- nodeJS 프로젝트를 만들 때 가장 먼저 만들어야 할 파일
- terminal창에 npm init을 입력하면 package.json을 자동으로 생성해 줌

scripts
- 실행하고 싶은 것
- package.json에 scripts에 실행 하고 싶은 code를 기술
- terminal 창에 npm run code name을 입력하면 됨
- 사용 방법) 
  - "scripts": {
        "start": "node index.js"
    }
  - npm run start
- 서버를 시작하는 script, CSS를 압축하는 script
  여러가지 script를 사용하게 됨

dependencies
- project를 실행할 때 필요한 모듈 정보를 담고 있음
- terminal 창에 npm i를 입력하면 npm이 dependencies안에 있는 
  모듈을 자동으로 설치 해주기 때문에
  module을 하나 하나 다운 받을 필요가 없음
- github에 modules파일을 따로 올릴 필요 없이 dependencies을
  활용하면 필요한 모듈을 다운 받게 할 수 있음
  project공유가 더 간편해 짐

devDependencies
- dependencies에 사용 모듈을 적거나 
  devDependencies에 사용 모듈을 적든
  크게 상관은 없음
- 가독성을 위하여 구별함
- dependencies에는 project실행에 필요한 module을 기술하고
- devDependencies에는 개발자 편의성에 필요한 module을 기술
- 어디에 적든 npm install 명령어을 통해 자동으로 module 설치 가능
- 다운 명령어에 --save-dev 추가하면 devDependencies에 기술됨
